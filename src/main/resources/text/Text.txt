import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.List;

public class AnimalTask implements Runnable {
    private final MapManager mapManager;
    private final int cellX;
    private final int cellY;

    public AnimalTask(MapManager mapManager, int cellX, int cellY) {
        this.mapManager = mapManager;
        this.cellX = cellX;
        this.cellY = cellY;
    }

    @Override
    public void run() {
        List<Entity> animals = mapManager.getAnimalsInCell(cellX, cellY);
        for (Entity animal : animals) {
            Entity bestAnimal = EntityProperties.getBestAnimalTable(animal, animals);
            if (bestAnimal != null && EntityProperties.valueTable(EntityProperties.formEntity(animal), EntityProperties.formEntity(bestAnimal)) > 0) {
                mapManager.removeAnimal(bestAnimal);
                animal.eat();
            }
        }
    }
}





import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.Random;

public class Play {

    public static void main(String[] args) {
        SwingUtilities.invokeLater(UiProperties::new);
    }

    public static void startSimulation(MapManager mapManager, Render render, int width, int height) {
        // ... existing code ...

        ExecutorService boardExecutor = Executors.newFixedThreadPool(20);

        new Timer(1000, e -> {
            if (mapManager.getAnimalCount() > 0) {
                for (Entity entity : mapManager.getAnimalList()) {
                    Random random = new Random();
                    int randomInt = random.nextInt(1, 5);
                    if (randomInt == 2) {
                        // переместить сущность
                        entity.updatePosition(mapManager.getWidth(), mapManager.getHeight());
                        mapManager.moveAnimal(entity, (int) entity.getEndX(), (int) entity.getEndY());
                        if (entity.getWeight() <= (entity.getWeightMax() * 0.15)) {
                            mapManager.removeAnimal(entity);
                        } else {
                            entity.hunger();
                        }
                    } else if (randomInt == 2) {
                        // удалить сущность
                        int cellX = mapManager.getCellX(entity);
                        int cellY = mapManager.getCellY(entity);
                        boardExecutor.submit(new AnimalTask(mapManager, cellX, cellY));
                    } else if (randomInt == 3) {
                        // создать новую сущность
                        Entity newEntity = EntityFactory.createEntity(entity);
                        int x = mapManager.getCellX(entity);
                        int y = mapManager.getCellY(entity);
                        mapManager.addAnimalToCell(newEntity, x, y);
                        newEntity.setStartX(x);
                        newEntity.setStartY(y);
                        newEntity.setEndX(x);
                        newEntity.setEndY(y);
                    }
                }
                render.animateEntities();
                render.repaint();
            }
        }).start();
    }
}



 /* JCheckBox audioCheckBox = new JCheckBox("Включить аудио");
        audioCheckBox.setSelected(true);
        audioCheckBox.addActionListener(e -> {
            //AudioPlayer player = new AudioPlayer(FilePathConfig.getAudioPath(), true);
            //Thread audioThread = new Thread(player);
            //audioThread.start();
        });
        inputPanel.add(audioCheckBox);*/